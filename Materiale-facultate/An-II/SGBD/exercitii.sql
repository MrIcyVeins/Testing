/*
CREATE TABLE EMPLOYEES(
    employee_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    first_name  VARCHAR(50),
    last_name   VARCHAR(50) NOT NULL,
    email       VARCHAR2(100) UNIQUE,
    hire_date   DATE DEFAULT SYSDATE,
    salary      NUMBER(8,2),
    department_id NUMBER
);

SELECT * FROM EMPLOYEES;
INSERT INTO EMPLOYEES(EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, SALARY, DEPARTMENT_ID)
VALUES(1, 'John', 'Doe', 'johndoe@email.com', 60000, 100);

INSERT INTO EMPLOYEES(EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, SALARY, DEPARTMENT_ID)
VALUES(2, 'Jane', 'Doe', 'janedoe@email.com', 65000, 200);

INSERT INTO EMPLOYEES(EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, SALARY, DEPARTMENT_ID)
VALUES(3, 'John', 'Smith', 'johnsmith@email.com', 75000, 100);

INSERT INTO EMPLOYEES(EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, SALARY, DEPARTMENT_ID)
VALUES(4, 'Sally', 'Umber', 'sallyumber@email.com', 100000, 102);

INSERT INTO EMPLOYEES(EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, SALARY, DEPARTMENT_ID)
VALUES(5, 'Joe', 'South', 'joesouth@email.com', 10000, 300);

 1. Creai un bloc PL/SQL care declar 2 variabile (una de tip ir de caractere i cealalt numeric ),
 ini ializate la declarare. Atribuiti valorile acestor variabile PLSQL unor variabile gazd (VARIABLE)
 SQL*Plus i tip riti valorile variabilelor PL/SQL pe ecran. Executai blocul PL/SQL.
 2. Creati si executati un bloc PL/SQL care cere de la tastatura 2 numere (prin variabile de substitutie
 SQL* Plus). Primul numar se va imparti la al doilea, si se va adauga rezultatului cel de-al doilea
 numar. Dac al doilea numr este 0, rezultatul va fi p tratul primului numr (x**2). Rezultatul va fi
 retinut intr-o variabila PL/SQL si va fi tiparit pe ecran.
 3. S se calculeze suma salariilor pentru un job al c rui cod este introdus de utilizator. Cutarea se va
 face case-insensitive.
 4. Creati un bloc PL/SQL care calculeaza castigul total pentru un an, salariul anual si procentul care
 reprezinta bonusul fiind transmise blocului PL/SQL prin variabile de substitutie SQL*Plus. Bonusul
 se va introduce ca numar intreg (pentru bonus de 15% se va introduce 15). Daca salariul este null,
 va fi setat la 0 inainte de a calcula castigul total. Executati blocul PL/SQL. Se va folosi functia NVL
 pentru manipularea valorilor NULL.
 5. Sa se creeze un bloc PL/SQL care calculeaza si modifica valoarea comisionului pentru un angajat al
 carui cod este dat de la tastatura, pe baza salariului acestuia, astfel:- daca salariul este mai mic decat 1000$, comisionul va fi 10% din salariu;- daca salariul ete intre 1000 si 1500$, comisionul va fi 15% din salariu;- daca salariul depaseste 1500$, comisionul va fi 20% din salariu;- daca salariul este NULL, comisionul va fi 0.
 Modific rile se fac în tabelul emp_pnu.
 6. Sa se creeze un bloc PL/SQL care selecteaza codul maxim de departament din tabelul
12
 DEPARTMENTS si il stocheaza intr-o variabila SQL*Plus. Se va tipari rezultatul pe ecran.
 7. Sa se creeze un bloc PL/SQL care insereaza un nou departament in tabelul DEPT_PNU. Se va
 folosi parametru de substitutie pentru numele departamentului. Codul este dat de valoarea variabilei
 calculate anterior +1. Locatia va avea valoarea null. Sa se listeze continutul tabelului DEPT_PNU.
 8. Sa se creeze un bloc PL/SQL care reactualizeaza locatia pentru un departament existent (în tabelul
 DEPT_PNU). Se vor folosi parametri de substitutie pentru numarul departamentului si locatia
 acestuia. Sa se listeze codul, numele si locatia pentru departamentul reactualizat.
 9. Sa se creeze un bloc PL/SQL care sterge departamentul creat la exercitiul 7. Se va folosi un
 parametru de substitutie pentru numarul departamentului. Se va tipari pe ecran numarul de linii
 afectate. Ce se intampla daca se introduce un cod de departament care nu exista?

---------------------------------------------------------------------------------------------------

 1. Creai un bloc PL/SQL care declara 2 variabile (una de tip sir de caractere si cealalt numeric ),
 initializate la declarare. Atribuiti valorile acestor variabile PLSQL unor variabile gazda (VARIABLE)
 SQL*Plus si tipariti valorile variabilelor PL/SQL pe ecran. Executati blocul PL/SQL.

*/
-- 1)
SET SERVEROUTPUT ON
DECLARE
    var_sir VARCHAR2(50) := 'Maria Popescu';
    var_num NUMBER       := 4500.75;
BEGIN
    :v_sir := var_sir;
    :v_num := var_num;
    dbms_output.put_line( :v_sir || ' ' || :v_num );
END;
/

-- 2)
/*
    Creati si executati un bloc PL/SQL care cere de la tastatura 2 numere (prin variabile de substitutie
 SQL* Plus). Primul numar se va imparti la al doilea, si se va adauga rezultatului cel de-al doilea
 numar. Daca al doilea numr este 0, rezultatul va fi patratul primului numar (x**2). Rezultatul va fi
 retinut intr-o variabila PL/SQL si va fi tiparit pe ecran. 
*/

DECLARE
    num1 NUMBER := &numar1;
    num2 NUMBER := &numar2;
    rez NUMBER;
BEGIN
    IF num2 = 0 THEN 
        rez := num1**2;
    ELSE
        rez := num1 + num1/num2;
    END IF;
    dbms_output.put_line(rez);
END;

/*
    3. Sa se calculeze suma salariilor pentru un job al carui cod este introdus de utilizator. Cautarea se va face case-insensitive.
*/

DECLARE
    v_cod EMPLOYEES.FIRST_NAME%TYPE := UPPER('&FIRST_NAME');
    v_suma_salariu NUMBER;
BEGIN

    SELECT SUM(SALARY) INTO v_suma_salariu FROM EMPLOYEES WHERE UPPER(FIRST_NAME) = v_cod;    
    dbms_output.put_line(v_suma_salariu);
END;

/*

4. Creati un bloc PL/SQL care calculeaza castigul total pentru un an, salariul anual si procentul care
 reprezinta bonusul fiind transmise blocului PL/SQL prin variabile de substitutie SQL*Plus. Bonusul
 se va introduce ca numar intreg (pentru bonus de 15% se va introduce 15). Daca salariul este null,
 va fi setat la 0 inainte de a calcula castigul total. Executati blocul PL/SQL. Se va folosi functia NVL
 pentru manipularea valorilor NULL.

- transmise prin variabile de substitutie SQL*PLUS  == &variabila

*/

DECLARE
    v_salariu NUMBER := NVL(&salariu, 0);
    v_bonus NUMBER := &bonus;
    v_total NUMBER;
BEGIN
    v_total := v_salariu + (v_salariu * v_bonus / 100);
    dbms_output.put_line(v_total);
END;

/*

5. Sa se creeze un bloc PL/SQL care calculeaza si modifica valoarea comisionului pentru un angajat al
 carui cod este dat de la tastatura, pe baza salariului acestuia, astfel:- daca salariul este mai mic decat 1000$, 
 comisionul va fi 10% din salariu;- daca salariul ete intre 1000 si 1500$, comisionul va fi 15% din salariu
 ;- daca salariul depaseste 1500$, comisionul va fi 20% din salariu;- daca salariul este NULL, comisionul va fi 0.
 Modificarile se fac în tabelul emp_pnu.


ALTER TABLE EMPLOYEES 
ADD (comision NUMBER(8,2));

SELECT * FROM EMPLOYEES;
*/

DECLARE
    v_cod NUMBER := &cod;
    v_comision NUMBER;
    v_salariu NUMBER;
    v_nume employees.FIRST_NAME%TYPE;
    v_last employees.LAST_NAME%TYPE;
BEGIN
    SELECT SALARY INTO v_salariu FROM EMPLOYEES WHERE EMPLOYEE_ID = v_cod;
    IF v_salariu < 1000 THEN 
        v_comision := 10;
    ELSIF v_salariu > 1500 THEN 
        v_comision := 20;
    ELSIF v_salariu <= 1500 AND v_salariu >= 1000 THEN 
        v_comision := 15;
    ELSE
        v_comision := 0;
    END IF;
    SELECT FIRST_NAME INTO v_nume FROM EMPLOYEES WHERE EMPLOYEE_ID = v_cod;
    SELECT LAST_NAME INTO v_last FROM EMPLOYEES WHERE EMPLOYEE_ID = v_cod;
    UPDATE EMPLOYEES SET COMISION = v_comision WHERE EMPLOYEE_ID = v_cod;
    dbms_output.put_line('Comision pentru ' || v_nume || ' ' || v_last || ' este ' || v_comision);
END;