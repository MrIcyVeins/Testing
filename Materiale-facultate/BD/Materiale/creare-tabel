-- CREAZA TABELE ( etapa 10 - 11 )

CREATE TABLE Client (
    client_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY
    (START WITH 1 INCREMENT BY 1 MINVALUE 1),
    nume_client VARCHAR(15) NOT NULL,
    prenume_client VARCHAR(15) NOT NULL,
    parola VARCHAR(35) NOT NULL,
    email VARCHAR(35) NOT NULL UNIQUE,
    telefon VARCHAR(13) NOT NULL,
    adresa VARCHAR(50) NOT NULL,
    cont_premium VARCHAR(2) DEFAULT 'nu',
    PRIMARY KEY (client_id)
);

CREATE TABLE Produs (
    produs_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    nume_produs VARCHAR(40) NOT NULL,
    descriere_produs VARCHAR(100),
    pret_produs NUMBER NOT NULL,
    categorie_produs VARCHAR(25) NOT NULL,
    oferta VARCHAR(2) DEFAULT 'nu',
    PRIMARY KEY (produs_id)
);

CREATE TABLE Furnizor (
    furnizor_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    nume_furnizor VARCHAR(30) NOT NULL,
    adresa_furnizor VARCHAR(30) NOT NULL,
    email_furnizor VARCHAR(30) NOT NULL,
    fax_furnizor VARCHAR(25),
    produs_furnizat VARCHAR(25) NOT NULL,
    PRIMARY KEY (furnizor_id)
);

CREATE TABLE Stoc (
    stoc_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    produs_id NUMBER,
    cantitate NUMBER NOT NULL,
    data_ultima_aprovizionare DATE NOT NULL,
    PRIMARY KEY (stoc_id),
    FOREIGN KEY(produs_id) REFERENCES Produs(produs_id)
);

CREATE TABLE Comanda (
    comanda_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    client_id NUMBER,
    data_comanda DATE NOT NULL,
    data_scadenta DATE NOT NULL,
    pret_total NUMBER NOT NULL,
    mod_plata VARCHAR(25) NOT NULL,
    PRIMARY KEY (comanda_id),
    FOREIGN KEY(client_id) REFERENCES Client(client_id)
);

CREATE TABLE Detalii_Comanda (
    detalii_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    comanda_id NUMBER,
    produs_id NUMBER,
    cantitate NUMBER NOT NULL,
    pret_unitar DECIMAL(10, 2) NOT NULL,
    pret_fara_tva DECIMAL(10, 2) NOT NULL,
    pret_cu_tva DECIMAL(10, 2) NOT NULL,
    tva DECIMAL(5, 2) NOT NULL CHECK (tva >= 0 AND tva <= 100),
    cod_promotional VARCHAR(2) DEFAULT 'nu',
    PRIMARY KEY (detalii_id),
    FOREIGN KEY(comanda_id) REFERENCES Comanda(comanda_id),
    FOREIGN KEY(produs_id) REFERENCES Produs(produs_id)
);
 
CREATE TABLE Aprovizionare (
    aprovizionare_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    produs_id NUMBER,
    furnizor_id NUMBER,
    cantitate NUMBER NOT NULL,
    data_aprovizionare DATE NOT NULL,
    PRIMARY KEY (aprovizionare_id),
    FOREIGN KEY(produs_id) REFERENCES Produs(produs_id),
    FOREIGN KEY(furnizor_id) REFERENCES Furnizor(furnizor_id)
);

-- INSEREAZA DATE IN TABELE ( etapa 11 )

SET SCAN OFF
INSERT INTO Client(nume_client, prenume_client, parola, email, telefon, adresa, cont_premium)
SELECT *
FROM
(
    SELECT 'Popescu', 'Ion', 'somepassword', 'ion.popescu@example.com', '0712345678', 'Str. Libertatii, nr. 1', 'nu' FROM DUAL UNION ALL
    SELECT 'Ionescu', 'Maria', 'chinchilla', 'maria.ionescu@example.com', '0723456789', 'Str. Independentei, nr. 10', 'nu' FROM DUAL UNION ALL
    SELECT 'Georgescu', 'Andrei', 'masterpassword', 'andrei.georgescu@example.com', '0734567890', 'Str. Victoriei, nr. 23', 'da' FROM DUAL UNION ALL
    SELECT 'Dumitrescu', 'Elena', 'P@ssw0rd!G5hVq#1K8j2Rz&7Tc', 'elena.dumitrescu@example.com', '0745678901', 'Str. Unirii, nr. 56', 'da' FROM DUAL UNION ALL
    SELECT 'Stanescu', 'Mihai', 'X9f#T@lM5$e@uY1W7Q8g*4rI2v', 'mihai.stanescu@example.com', '0756789012', 'Str. Revolutiei, nr. 78', 'da' FROM DUAL UNION ALL
    SELECT 'Popa', 'Ana', 'b8@Q*1N6yT#4vWpZ5$hJ2!rX7kE', 'ana.popa@example.com', '0767890123', 'Str. Eroilor, nr. 12', 'nu' FROM DUAL UNION ALL
    SELECT 'Tudor', 'Florin', 'Y*8hT1@eG2$9Rz6wQ#5@v3LpI4U', 'florin.tudor@example.com', '0778901234', 'Str. Primaverii, nr. 34', 'nu' FROM DUAL UNION ALL
    SELECT 'Marin', 'Alina', 'm6@J#1R2*8yG$7L5W!4fQz3P9Vk', 'alina.marin@example.com', '0789012345', 'Str. Sperantei, nr. 22', 'da' FROM DUAL UNION ALL
    SELECT 'Radu', 'George', 'r1$Z@4G8!k#3Q2L7V6*9Tp5eWyU', 'george.radu@example.com', '0790123456', 'Str. Pacii, nr. 19', 'nu' FROM DUAL UNION ALL
    SELECT 'Iliescu', 'Simona', 'H5$3@Q1!Rz4v*2Y6K7pX8T#9gLf', 'simona.iliescu@example.com', '0701234567', 'Str. Prieteniei, nr. 44', 'nu' FROM DUAL UNION ALL
    SELECT 'Vasilescu', 'Lucian', 'v8*9Q4@2W1#T5$yR3!Lz6p7GmXk', 'lucian.vasilescu@example.com', '0712345679', 'Str. Pacea, nr. 11', 'nu' FROM DUAL UNION ALL
    SELECT 'Petrescu', 'Ioana', 'Q3$z@6R1!L4p*8G7V5T#2y9kXWe', 'ioana.petrescu@example.com', '0723456790', 'Str. Libertatii, nr. 20', 'nu' FROM DUAL UNION ALL
    SELECT 'Munteanu', 'Stefan', 'Rz6*4Q1@T5!9L2#3y7G$8vWkpXm', 'stefan.munteanu@example.com', '0734567901', 'Str. Florilor, nr. 33', 'nu' FROM DUAL UNION ALL
    SELECT 'Constantin', 'Laura', 'V5@8Rz4#3Q2!9G1y6L*7T$pWkXm', 'laura.constantin@example.com', '0745679012', 'Str. Crinului, nr. 45', 'nu' FROM DUAL UNION ALL
    SELECT 'Dragomir', 'Catalin', '2Q5@T1#8v3Rz!4L*7$9yG6pXWk', 'catalin.dragomir@example.com', '0756789123', 'Str. Bucegi, nr. 66', 'nu' FROM DUAL 
);

INSERT INTO Produs (nume_produs, descriere_produs, pret_produs, categorie_produs, oferta)
SELECT * 
FROM (
    SELECT 'Laptop HP Spectre x360', 'Laptop ultrabook convertibil cu ecran tactil', 6500, 'Electronice', 'nu' FROM DUAL UNION ALL
    SELECT 'iPhone 14 Pro Max', 'Smartphone de ultimă generație cu cameră triplă', 7500, 'Electronice', 'da' FROM DUAL UNION ALL
    SELECT 'Samsung Galaxy Tab S8', 'Tableta performantă cu ecran AMOLED', 4200, 'Electronice', 'nu' FROM DUAL UNION ALL
    SELECT 'Sony WH-1000XM4', 'Căști wireless cu anulare activă a zgomotului', 1200, 'Accesorii', 'nu' FROM DUAL UNION ALL
    SELECT 'GoPro HERO10', 'Cameră de acțiune cu rezoluție 5K', 3000, 'Accesorii', 'da' FROM DUAL UNION ALL
    SELECT 'Kindle Paperwhite', 'E-book reader cu ecran iluminat și anti-reflexie', 600, 'Accesorii', 'nu' FROM DUAL UNION ALL
    SELECT 'Apple Watch Series 7', 'Ceas inteligent cu funcții avansate de sănătate', 2200, 'Accesorii', 'da' FROM DUAL UNION ALL
    SELECT 'Roku Streaming Stick 4K', 'Dispozitiv de streaming media 4K', 400, 'Accesorii', 'nu' FROM DUAL UNION ALL
    SELECT 'DJI Mavic Air 2', 'Dronă pliabilă cu cameră 4K', 4800, 'Accesorii', 'nu' FROM DUAL UNION ALL
    SELECT 'Logitech MX Master 3', 'Mouse wireless ergonomic pentru productivitate', 450, 'Accesorii', 'nu' FROM DUAL UNION ALL
    SELECT 'Anker PowerCore 20000', 'Baterie externă portabilă cu capacitate mare', 300, 'Accesorii', 'da' FROM DUAL UNION ALL
    SELECT 'Samsung T7 Touch', 'SSD extern cu cititor de amprentă', 900, 'Accesorii', 'nu' FROM DUAL UNION ALL
    SELECT 'Fitbit Charge 5', 'Brățară fitness cu monitorizare a ritmului cardiac', 600, 'Accesorii', 'nu' FROM DUAL UNION ALL
    SELECT 'JBL Charge 5', 'Boxă portabilă cu bluetooth și funcție powerbank', 700, 'Accesorii', 'nu' FROM DUAL UNION ALL
    SELECT 'Oculus Quest 2', 'Set VR autonom cu controlere touch', 2500, 'Accesorii', 'da' FROM DUAL
);

INSERT INTO Furnizor (nume_furnizor, adresa_furnizor, email_furnizor, fax_furnizor, produs_furnizat)
SELECT * 
FROM (
    SELECT 'TechDistribution', 'Str. Tehnologiei, nr. 12', 'contact@techdistribution.com', 0211234567, 'Laptopuri' FROM DUAL UNION ALL
    SELECT 'MobileWorld', 'Str. Mobilei, nr. 8', 'sales@mobileworld.com', 0212345678, 'Smartphone-uri' FROM DUAL UNION ALL
    SELECT 'TabletHub', 'Str. Tabletelor, nr. 22', 'info@tablethub.com', 0213456789, 'Tablete' FROM DUAL UNION ALL
    SELECT 'AudioMasters', 'Str. Audio, nr. 34', 'support@audiomasters.com', 0214567890, 'Căști' FROM DUAL UNION ALL
    SELECT 'CameraExperts', 'Str. Camerei, nr. 18', 'contact@cameraexperts.com', 0215678901, 'Camere de acțiune' FROM DUAL UNION ALL
    SELECT 'EbookReaders', 'Str. Ebook, nr. 45', 'info@ebookreaders.com', 0216789012, 'E-book readere' FROM DUAL UNION ALL
    SELECT 'SmartWatches', 'Str. Ceasului, nr. 3', 'sales@smartwatches.com', 0217890123, 'Ceasuri inteligente' FROM DUAL UNION ALL
    SELECT 'StreamingDevices', 'Str. Streaming, nr. 14', 'support@streamingdevices.com', 0218901234, 'Dispozitive de streaming' FROM DUAL UNION ALL
    SELECT 'DroneZone', 'Str. Dronelor, nr. 27', 'info@dronezone.com', 0219012345, 'Drone' FROM DUAL UNION ALL
    SELECT 'AccessoryCenter', 'Str. Accesoriilor, nr. 9', 'contact@accessorycenter.com', 0210123456, 'Mouse-uri' FROM DUAL UNION ALL
    SELECT 'PowerSolutions', 'Str. Puterii, nr. 5', 'support@powersolutions.com', 0211234568, 'Baterii externe' FROM DUAL UNION ALL
    SELECT 'StoragePro', 'Str. Stocării, nr. 11', 'sales@storagepro.com', 0212345679, 'SSD-uri' FROM DUAL UNION ALL
    SELECT 'FitnessGear', 'Str. Fitness, nr. 7', 'info@fitnessgear.com', 0213456780, 'Brățări fitness' FROM DUAL UNION ALL
    SELECT 'SoundWave', 'Str. Sunetului, nr. 6', 'contact@soundwave.com', 0214567891, 'Boxe portabile' FROM DUAL UNION ALL
    SELECT 'VRInnovations', 'Str. Virtuală, nr. 10', 'sales@vrinnovations.com', 0215678902, 'Seturi VR' FROM DUAL
);

INSERT INTO Stoc (produs_id, cantitate, data_ultima_aprovizionare)
SELECT * 
FROM (
    SELECT 1, 20, TO_DATE('2024-03-01', 'YYYY-MM-DD') FROM DUAL UNION ALL
    SELECT 2, 30, TO_DATE('2024-03-02', 'YYYY-MM-DD') FROM DUAL UNION ALL
    SELECT 3, 25, TO_DATE('2024-03-03', 'YYYY-MM-DD') FROM DUAL UNION ALL
    SELECT 4, 40, TO_DATE('2024-03-04', 'YYYY-MM-DD') FROM DUAL UNION ALL
    SELECT 5, 15, TO_DATE('2024-03-05', 'YYYY-MM-DD') FROM DUAL UNION ALL
    SELECT 6, 35, TO_DATE('2024-03-06', 'YYYY-MM-DD') FROM DUAL UNION ALL
    SELECT 7, 20, TO_DATE('2024-03-07', 'YYYY-MM-DD') FROM DUAL UNION ALL
    SELECT 8, 50, TO_DATE('2024-03-08', 'YYYY-MM-DD') FROM DUAL UNION ALL
    SELECT 9, 10, TO_DATE('2024-03-09', 'YYYY-MM-DD') FROM DUAL UNION ALL
    SELECT 10, 25, TO_DATE('2024-03-10', 'YYYY-MM-DD') FROM DUAL UNION ALL
    SELECT 11, 45, TO_DATE('2024-03-11', 'YYYY-MM-DD') FROM DUAL UNION ALL
    SELECT 12, 30, TO_DATE('2024-03-12', 'YYYY-MM-DD') FROM DUAL UNION ALL
    SELECT 13, 40, TO_DATE('2024-03-13', 'YYYY-MM-DD') FROM DUAL UNION ALL
    SELECT 14, 50, TO_DATE('2024-03-14', 'YYYY-MM-DD') FROM DUAL UNION ALL
    SELECT 15, 20, TO_DATE('2024-03-15', 'YYYY-MM-DD') FROM DUAL
);

INSERT INTO Comanda (client_id, data_comanda, data_scadenta, pret_total, mod_plata)
SELECT * 
FROM (
    SELECT 1, TO_DATE('2024-04-01', 'YYYY-MM-DD'), TO_DATE('2024-05-01', 'YYYY-MM-DD'), 6500, 'Card' FROM DUAL UNION ALL
    SELECT 2, TO_DATE('2024-04-02', 'YYYY-MM-DD'), TO_DATE('2024-05-02', 'YYYY-MM-DD'), 7500, 'Card' FROM DUAL UNION ALL
    SELECT 3, TO_DATE('2024-04-03', 'YYYY-MM-DD'), TO_DATE('2024-05-03', 'YYYY-MM-DD'), 4200, 'Cash' FROM DUAL UNION ALL
    SELECT 4, TO_DATE('2024-04-04', 'YYYY-MM-DD'), TO_DATE('2024-05-04', 'YYYY-MM-DD'), 1200, 'Card' FROM DUAL UNION ALL
    SELECT 5, TO_DATE('2024-04-05', 'YYYY-MM-DD'), TO_DATE('2024-05-05', 'YYYY-MM-DD'), 3000, 'Cash' FROM DUAL UNION ALL
    SELECT 6, TO_DATE('2024-04-06', 'YYYY-MM-DD'), TO_DATE('2024-05-06', 'YYYY-MM-DD'), 600, 'Card' FROM DUAL UNION ALL
    SELECT 7, TO_DATE('2024-04-07', 'YYYY-MM-DD'), TO_DATE('2024-05-07', 'YYYY-MM-DD'), 2200, 'Card' FROM DUAL UNION ALL
    SELECT 8, TO_DATE('2024-04-08', 'YYYY-MM-DD'), TO_DATE('2024-05-08', 'YYYY-MM-DD'), 400, 'Cash' FROM DUAL UNION ALL
    SELECT 9, TO_DATE('2024-04-09', 'YYYY-MM-DD'), TO_DATE('2024-05-09', 'YYYY-MM-DD'), 4800, 'Card' FROM DUAL UNION ALL
    SELECT 10, TO_DATE('2024-04-10', 'YYYY-MM-DD'), TO_DATE('2024-05-10', 'YYYY-MM-DD'), 450, 'Cash' FROM DUAL UNION ALL
    SELECT 11, TO_DATE('2024-04-11', 'YYYY-MM-DD'), TO_DATE('2024-05-11', 'YYYY-MM-DD'), 300, 'Card' FROM DUAL UNION ALL
    SELECT 12, TO_DATE('2024-04-12', 'YYYY-MM-DD'), TO_DATE('2024-05-12', 'YYYY-MM-DD'), 900, 'Cash' FROM DUAL UNION ALL
    SELECT 13, TO_DATE('2024-04-13', 'YYYY-MM-DD'), TO_DATE('2024-05-13', 'YYYY-MM-DD'), 700, 'Card' FROM DUAL UNION ALL
    SELECT 14, TO_DATE('2024-04-14', 'YYYY-MM-DD'), TO_DATE('2024-05-14', 'YYYY-MM-DD'), 2500, 'Cash' FROM DUAL UNION ALL
    SELECT 15, TO_DATE('2024-04-15', 'YYYY-MM-DD'), TO_DATE('2024-05-15', 'YYYY-MM-DD'), 2500, 'Card' FROM DUAL
);


INSERT INTO Detalii_Comanda (comanda_id, produs_id, cantitate, pret_unitar, pret_fara_tva, pret_cu_tva, tva, cod_promotional)
SELECT * 
FROM (
    SELECT 1 AS comanda_id, 1 AS produs_id, 1 AS cantitate, 6500 AS pret_unitar, 5416.67 AS pret_fara_tva, 6500 AS pret_cu_tva, 20 AS tva, 'nu' AS cod_promotional FROM DUAL UNION ALL
    SELECT 1 AS comanda_id, 4 AS produs_id, 1 AS cantitate, 1200 AS pret_unitar, 960 AS pret_fara_tva, 1200 AS pret_cu_tva, 20 AS tva, 'nu' AS cod_promotional FROM DUAL UNION ALL
    SELECT 1 AS comanda_id, 2 AS produs_id, 2 AS cantitate, 7500 AS pret_unitar, 6250 AS pret_fara_tva, 7500 AS pret_cu_tva, 20 AS tva, 'nu' AS cod_promotional FROM DUAL UNION ALL
    SELECT 2 AS comanda_id, 2 AS produs_id, 1 AS cantitate, 7500 AS pret_unitar, 6250 AS pret_fara_tva, 7500 AS pret_cu_tva, 20 AS tva, 'da' AS cod_promotional FROM DUAL UNION ALL
    SELECT 3 AS comanda_id, 3 AS produs_id, 1 AS cantitate, 4200 AS pret_unitar, 3500 AS pret_fara_tva, 4200 AS pret_cu_tva, 20 AS tva, 'nu' AS cod_promotional FROM DUAL UNION ALL
    SELECT 4 AS comanda_id, 4 AS produs_id, 1 AS cantitate, 1200 AS pret_unitar, 1000 AS pret_fara_tva, 1200 AS pret_cu_tva, 20 AS tva, 'nu' AS cod_promotional FROM DUAL UNION ALL
    SELECT 5 AS comanda_id, 5 AS produs_id, 1 AS cantitate, 3000 AS pret_unitar, 2500 AS pret_fara_tva, 3000 AS pret_cu_tva, 20 AS tva, 'da' AS cod_promotional FROM DUAL UNION ALL
    SELECT 6 AS comanda_id, 6 AS produs_id, 1 AS cantitate, 600 AS pret_unitar, 500 AS pret_fara_tva, 600 AS pret_cu_tva, 20 AS tva, 'nu' AS cod_promotional FROM DUAL UNION ALL
    SELECT 7 AS comanda_id, 7 AS produs_id, 1 AS cantitate, 2200 AS pret_unitar, 1833.33 AS pret_fara_tva, 2200 AS pret_cu_tva, 20 AS tva, 'da' AS cod_promotional FROM DUAL UNION ALL
    SELECT 8 AS comanda_id, 8 AS produs_id, 1 AS cantitate, 400 AS pret_unitar, 333.33 AS pret_fara_tva, 400 AS pret_cu_tva, 20 AS tva, 'nu' AS cod_promotional FROM DUAL UNION ALL
    SELECT 9 AS comanda_id, 9 AS produs_id, 1 AS cantitate, 4800 AS pret_unitar, 4000 AS pret_fara_tva, 4800 AS pret_cu_tva, 20 AS tva, 'nu' AS cod_promotional FROM DUAL UNION ALL
    SELECT 10 AS comanda_id, 10 AS produs_id, 1 AS cantitate, 450 AS pret_unitar, 375 AS pret_fara_tva, 450 AS pret_cu_tva, 20 AS tva, 'nu' AS cod_promotional FROM DUAL UNION ALL
    SELECT 10 AS comanda_id, 2 AS produs_id, 1 AS cantitate, 7500 AS pret_unitar, 6250 AS pret_fara_tva, 7500 AS pret_cu_tva, 20 AS tva, 'nu' AS cod_promotional FROM DUAL UNION ALL
    SELECT 11 AS comanda_id, 11 AS produs_id, 1 AS cantitate, 300 AS pret_unitar, 250 AS pret_fara_tva, 300 AS pret_cu_tva, 20 AS tva, 'da' AS cod_promotional FROM DUAL UNION ALL
    SELECT 12 AS comanda_id, 12 AS produs_id, 1 AS cantitate, 900 AS pret_unitar, 750 AS pret_fara_tva, 900 AS pret_cu_tva, 20 AS tva, 'nu' AS cod_promotional FROM DUAL UNION ALL
    SELECT 13 AS comanda_id, 13 AS produs_id, 1 AS cantitate, 600 AS pret_unitar, 500 AS pret_fara_tva, 600 AS pret_cu_tva, 20 AS tva, 'nu' AS cod_promotional FROM DUAL UNION ALL
    SELECT 14 AS comanda_id, 14 AS produs_id, 1 AS cantitate, 700 AS pret_unitar, 583.33 AS pret_fara_tva, 700 AS pret_cu_tva, 20 AS tva, 'nu' AS cod_promotional FROM DUAL UNION ALL
    SELECT 15 AS comanda_id, 15 AS produs_id, 1 AS cantitate, 2500 AS pret_unitar, 2083.33 AS pret_fara_tva, 2500 AS pret_cu_tva, 20 AS tva, 'da' AS cod_promotional FROM DUAL
);



INSERT INTO Aprovizionare (produs_id, furnizor_id, cantitate, data_aprovizionare)
SELECT * 
FROM (
    SELECT 1 AS produs_id, 1 AS furnizor_id, 20 AS cantitate, TO_DATE('2024-03-01', 'YYYY-MM-DD') AS data_aprovizionare FROM DUAL UNION ALL
    SELECT 2 AS produs_id, 2 AS furnizor_id, 30 AS cantitate, TO_DATE('2024-03-02', 'YYYY-MM-DD') AS data_aprovizionare FROM DUAL UNION ALL
    SELECT 3 AS produs_id, 3 AS furnizor_id, 25 AS cantitate, TO_DATE('2024-03-03', 'YYYY-MM-DD') AS data_aprovizionare FROM DUAL UNION ALL
    SELECT 4 AS produs_id, 4 AS furnizor_id, 40 AS cantitate, TO_DATE('2024-03-04', 'YYYY-MM-DD') AS data_aprovizionare FROM DUAL UNION ALL
    SELECT 5 AS produs_id, 5 AS furnizor_id, 15 AS cantitate, TO_DATE('2024-03-05', 'YYYY-MM-DD') AS data_aprovizionare FROM DUAL UNION ALL
    SELECT 6 AS produs_id, 6 AS furnizor_id, 35 AS cantitate, TO_DATE('2024-03-06', 'YYYY-MM-DD') AS data_aprovizionare FROM DUAL UNION ALL
    SELECT 7 AS produs_id, 7 AS furnizor_id, 20 AS cantitate, TO_DATE('2024-03-07', 'YYYY-MM-DD') AS data_aprovizionare FROM DUAL UNION ALL
    SELECT 8 AS produs_id, 8 AS furnizor_id, 50 AS cantitate, TO_DATE('2024-03-08', 'YYYY-MM-DD') AS data_aprovizionare FROM DUAL UNION ALL
    SELECT 9 AS produs_id, 9 AS furnizor_id, 10 AS cantitate, TO_DATE('2024-03-09', 'YYYY-MM-DD') AS data_aprovizionare FROM DUAL UNION ALL
    SELECT 10 AS produs_id, 10 AS furnizor_id, 25 AS cantitate, TO_DATE('2024-03-10', 'YYYY-MM-DD') AS data_aprovizionare FROM DUAL UNION ALL
    SELECT 11 AS produs_id, 11 AS furnizor_id, 45 AS cantitate, TO_DATE('2024-03-11', 'YYYY-MM-DD') AS data_aprovizionare FROM DUAL UNION ALL
    SELECT 12 AS produs_id, 12 AS furnizor_id, 30 AS cantitate, TO_DATE('2024-03-12', 'YYYY-MM-DD') AS data_aprovizionare FROM DUAL UNION ALL
    SELECT 13 AS produs_id, 13 AS furnizor_id, 40 AS cantitate, TO_DATE('2024-03-13', 'YYYY-MM-DD') AS data_aprovizionare FROM DUAL UNION ALL
    SELECT 14 AS produs_id, 14 AS furnizor_id, 50 AS cantitate, TO_DATE('2024-03-14', 'YYYY-MM-DD') AS data_aprovizionare FROM DUAL UNION ALL
    SELECT 15 AS produs_id, 15 AS furnizor_id, 20 AS cantitate, TO_DATE('2024-03-15', 'YYYY-MM-DD') AS data_aprovizionare FROM DUAL
);

-- CERERI SQL ( etapa 12 )

-- Afișează numele clienților și numărul total de produse comandate de fiecare dintre ei, filtrând clienții care au comandat produse din cel puțin 2 categorii diferite.
SELECT cl.nume_client, cl.prenume_client, COUNT(dc.produs_id) AS numar_produse
FROM Client cl
JOIN Comanda c ON cl.client_id = c.client_id
JOIN Detalii_Comanda dc ON c.comanda_id = dc.comanda_id
JOIN Produs p ON dc.produs_id = p.produs_id
GROUP BY cl.nume_client, cl.prenume_client
HAVING COUNT(DISTINCT p.categorie_produs) >= 2;

-- Afișează produsele care au fost comandate cel puțin de 3 ori și care au generat venituri totale mai mari de 10000.
SELECT p.nume_produs, comenzi_totale, venit_total
FROM Produs p, 
    (SELECT produs_id, COUNT(*) AS comenzi_totale, SUM(pret_cu_tva) AS venit_total
     FROM Detalii_Comanda
     GROUP BY produs_id
     HAVING COUNT(*) >= 3 AND SUM(pret_cu_tva) > 10000) dc
WHERE p.produs_id = dc.produs_id;

-- Afișează categoriile de produse care au generat venituri totale mai mari de 7000, împreună cu numele clienților care au comandat din aceste categorii, și zilele de la ultima comandă pentru fiecare client.
SELECT p.categorie_produs, cl.nume_client, SUM(dc.pret_cu_tva) AS venit_total,
       TRUNC(SYSDATE - MAX(c.data_comanda)) AS zile_de_la_ultima_comanda,
       CASE 
           WHEN TRUNC(SYSDATE - MAX(c.data_comanda)) <= 30 THEN 'Recent'
           ELSE 'Nu este recent'
       END AS statut_comanda
FROM Produs p
JOIN Detalii_Comanda dc ON p.produs_id = dc.produs_id
JOIN Comanda c ON dc.comanda_id = c.comanda_id
JOIN Client cl ON c.client_id = cl.client_id
GROUP BY p.categorie_produs, cl.nume_client
HAVING SUM(dc.pret_cu_tva) > 7000;

-- Afișează toate comenzile ordonate după data comenzii, folosește NVL pentru a înlocui valoarea null în câmpul cod_promotional și DECODE pentru a traduce modurile de plată, și funcții pe șiruri de caractere pentru a formata numele clienților.
SELECT c.comanda_id, c.data_comanda, NVL(dc.cod_promotional, 'FARA_COD') AS cod_promotional, 
       DECODE(c.mod_plata, 'CC', 'Card Credit', 'PP', 'PayPal', 'NB', 'Net Banking', 'Alta', 'Card', 'Cash') AS mod_plata,
       UPPER(cl.nume_client) || ', ' || INITCAP(cl.prenume_client) AS nume_complet
FROM Comanda c
JOIN Detalii_Comanda dc ON c.comanda_id = dc.comanda_id
JOIN Client cl ON c.client_id = cl.client_id
ORDER BY c.data_comanda;

-- Afișează produsele și numărul total de comenzi pentru produsele care au fost comandate mai mult de 5 ori, folosind un bloc de cerere (WITH), și zilele trecute de la prima comandă pentru fiecare produs.
WITH Produse_Comandate AS (
    SELECT produs_id, COUNT(*) AS numar_comenzi, MIN(c.data_comanda) AS prima_comanda
    FROM Detalii_Comanda dc
    JOIN Comanda c ON dc.comanda_id = c.comanda_id
    GROUP BY produs_id
    HAVING COUNT(*) > 2
)
SELECT p.nume_produs, pc.numar_comenzi,
       TRUNC(SYSDATE - pc.prima_comanda) AS zile_de_la_prima_comanda,
       LOWER(p.descriere_produs) AS descriere_produs_mic
FROM Produs p
JOIN Produse_Comandate pc ON p.produs_id = pc.produs_id;





-- MODIFICA VALOARE ATRIBUT
-- ALTER TABLE Furnizor MODIFY email_furnizor VARCHAR2(30);

-- STERGE TABELE+DATE
--drop table Client cascade constraints;
--drop table Produs cascade constraints;
--drop table Furnizor cascade constraints;
--drop table Stoc cascade constraints;
--drop table Comanda cascade constraints;
--drop table Detalii_Comanda cascade constraints;
--drop table Aprovizionare cascade constraints;